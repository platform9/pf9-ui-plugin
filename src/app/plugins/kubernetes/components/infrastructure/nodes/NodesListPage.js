import React from 'react'
import { localizeRoles } from 'api-client/ResMgr'
import { pathStrOr } from 'utils/fp'
import ExternalLink from 'core/components/ExternalLink'
import ProgressBar from 'core/components/progress/ProgressBar'
import createCRUDComponents from 'core/helpers/createCRUDComponents'
import { pathOr, pipe, pick, path, prop } from 'ramda'
import { castBoolToStr, castFuzzyBool, columnPathLookup } from 'utils/misc'
import SimpleLink from 'core/components/SimpleLink'
import { loadNodes } from 'k8s/components/infrastructure/nodes/actions'
import ClusterStatusSpan from 'k8s/components/infrastructure/clusters/ClusterStatus'
import {
  connectionStatusFieldsTable,
  clusterHealthStatusFields,
} from '../clusters/ClusterStatusUtils'
import NodeDeAuthDialog from './NodeDeAuthDialog'
import RemoteSupportDialog from './RemoteSupportDialog'
import { Tooltip } from '@material-ui/core'
import Text from 'core/elements/text'
import { isAdminRole } from 'k8s/util/helpers'
import { listTablePrefs, allKey } from 'app/constants'
import { createUsePrefParamsHook } from 'core/hooks/useParams'
import useDataLoader from 'core/hooks/useDataLoader'
import ClusterPicklist from 'k8s/components/common/ClusterPicklist'
import { makeStyles } from '@material-ui/styles'
import { routes } from 'core/utils/routes'
import { ToolbarActionIcon } from 'core/components/listTable/ListTableBatchActions'
import { ActionDataKeys } from 'k8s/DataKeys'
import ResourceUsageTables from '../common/ResourceUsageTables'
import NodesStatePicklist from './nodes-state-picklist'
import NodeAuthDialog from './NodeAuthDialog'
import { NodeState } from './model'
import { orderInterfaces, hasClockDrift, nodeApiServerHealthStatusFields } from './helper'
import { renderErrorStatus } from '../clusters/ClusterStatus'
import NodeRolesPicklist from './node-roles-picklist'

const useStyles = makeStyles((theme) => ({
  title: {
    display: 'grid',
    gridTemplateColumns: '22px 1fr',
    gridGap: '8px',
    alignItems: 'center',
  },
  link: {
    display: 'inherit',
    color: theme.palette.primary.main,
  },
}))

const defaultParams = {
  clusterId: allKey,
  state: allKey,
  role: allKey,
}
const usePrefParams = createUsePrefParamsHook('Nodes', listTablePrefs)

const ListPage = ({ ListContainer }) => {
  return () => {
    const { params, getParamsUpdater } = usePrefParams(defaultParams)
    const [nodes, loading, reload] = useDataLoader(loadNodes, params)

    const filterByCluster = (node) => {
      if (params.clusterId === allKey) {
        return true
      } else if (params.clusterId === '') {
        return !node.clusterUuid
      } else {
        return node.clusterUuid === params.clusterId
      }
    }

    const filterByNodeState = (node) => {
      if (params.state === allKey) {
        return true
      } else {
        return params.state === NodeState.Authorized ? node.isAuthorized : !node.isAuthorized
      }
    }

    const filterByNodeRole = (node) => {
      if (params.role === allKey) {
        return true
      } else {
        return params.role === 'master' ? node.isMaster : !node.isMaster
      }
    }

    const filteredNodes = nodes.filter((node) => {
      return filterByCluster(node) && filterByNodeState(node) && filterByNodeRole(node)
    })

    return (
      <ListContainer
        loading={loading}
        reload={reload}
        data={filteredNodes}
        getParamsUpdater={getParamsUpdater}
        filters={
          <>
            <ClusterPicklist
              onChange={getParamsUpdater('clusterId')}
              value={params.clusterId}
              noneLabel="No Cluster"
              selectFirst={false}
              showNone
            />
            <NodesStatePicklist onChange={getParamsUpdater('state')} value={params.state} />
            <NodeRolesPicklist onChange={getParamsUpdater('role')} value={params.role} />
          </>
        }
        {...pick(listTablePrefs, params)}
      />
    )
  }
}

const renderRoles = (_, node) => {
  const roles = pathOr([], ['combined', 'roles'], node)
  return localizeRoles(roles).join(', ')
}

export const UsageBar = ({ stat }) => {
  const percent = Math.round((stat.current * 100) / stat.max)
  const cur = stat.current.toFixed(2)
  const max = stat.max.toFixed(2)
  return (
    <ProgressBar
      compact
      percent={percent}
      variant="health"
      label={(p) => (
        <span>
          <strong>{p}%</strong> - {cur}/{max}
          {stat.units} {stat.type}
        </span>
      )}
    />
  )
}

const renderStats = (_, { usage }) => <ResourceUsageTables usage={usage} />

const renderLogs = (url) => (
  <Tooltip title="This is the log file generated by the PMK installer and PMK node status check components (pf9-kube)">
    <div>
      <ExternalLink url={url}>View</ExternalLink>
    </div>
  </Tooltip>
)

const getSpotInstance = pipe(
  columnPathLookup('combined.resmgr.extensions.node_metadata.data.isSpotInstance'),
  castFuzzyBool,
  castBoolToStr(),
)
const NodeDetailLinkComponent = ({ name, node }) => {
  const classes = useStyles()
  const hasSupportRole = !!path(['combined', 'supportRole'], node)
  return (
    <div className={classes.title}>
      <span className={classes.link}>{hasSupportRole && renderRemoteSupport()}</span>
      <SimpleLink src={routes.nodes.detail.path({ id: node.uuid })}>{name}</SimpleLink>
    </div>
  )
}
const renderNodeDetailLink = (name, node) => <NodeDetailLinkComponent name={name} node={node} />

const renderClusterLink = (clusterName, { clusterUuid }) =>
  clusterUuid && (
    <SimpleLink src={routes.cluster.nodes.path({ id: clusterUuid })}>{clusterName}</SimpleLink>
  )

const renderConverging = (clusterUuid) => (
  <ClusterStatusSpan status="loading" iconStatus>
    {clusterUuid ? (
      <SimpleLink src={routes.cluster.nodeHealth.path({ id: clusterUuid })}>Converging</SimpleLink>
    ) : (
      'Converging'
    )}
  </ClusterStatusSpan>
)

const renderRemoteSupport = () => (
  <Tooltip
    title={
      "Advanced Remote Support is currently enabled on this node. To disable it, select the 'Configure Remote Support' action from the actions bar."
    }
  >
    <ToolbarActionIcon icon="headset" />
  </Tooltip>
)

const renderConnectionStatus = (_, { clusterUuid, status, combined }) => {
  if (status === 'converging') {
    return renderConverging(clusterUuid)
  }

  const connectionStatus = status === 'disconnected' ? 'disconnected' : 'connected'
  const showLastResponse = status === 'disconnected' && combined && combined.lastResponse

  const fields = connectionStatusFieldsTable[connectionStatus]
  return (
    <ClusterStatusSpan status={fields.clusterStatus}>
      {fields.label}
      <br />
      {showLastResponse && `since ${combined.lastResponse}`}
    </ClusterStatusSpan>
  )
}

export const renderNodeHealthStatus = (_, node, onClick = undefined) => {
  const { status, clusterUuid } = node
  if (status === 'converging') {
    return renderConverging(clusterUuid)
  }

  const healthStatus =
    status === 'disconnected' ? 'unknown' : status === 'ok' ? 'healthy' : 'unhealthy'
  const fields = clusterHealthStatusFields[healthStatus]

  const content = node.clusterUuid ? (
    <SimpleLink src={routes.cluster.nodeHealth.path({ id: node.clusterUuid })}>
      {fields.label}
    </SimpleLink>
  ) : (
    fields.label
  )
  return (
    <>
      <ClusterStatusSpan title={fields.label} status={fields.status}>
        {onClick ? <SimpleLink onClick={() => onClick(node)}>{fields.label}</SimpleLink> : content}
      </ClusterStatusSpan>
      {hasClockDrift(node) &&
        renderErrorStatus(routes.nodes.detail.path({ id: node.uuid }), 'table', 'Node Clock Drift')}
    </>
  )
}

const renderRole = (_, { isMaster }) => (isMaster ? 'Master' : 'Worker')

const renderApiServerHealth = (_, node) => {
  if (!node.isMaster) return
  const status = node.api_responding ? 'online' : 'offline'
  const fields = nodeApiServerHealthStatusFields[status]

  return (
    <>
      <ClusterStatusSpan title={fields.message} status={fields.clusterStatus}>
        {fields.label}
      </ClusterStatusSpan>
    </>
  )
}

export const renderNetworkInterfaces = (_, node, options = {}) => {
  const { wrapText = false } = options
  const primaryNetwork = pathStrOr(node.primaryIp, 'combined.qbert.primaryIp', node)
  const networkInterfaces = pathStrOr({}, 'combined.networkInterfaces', node)
  const orderedInterfaces = orderInterfaces(networkInterfaces, primaryNetwork)
  return orderedInterfaces.map(([interfaceName, interfaceIp]) => (
    <Text
      key={`${interfaceName}-${interfaceIp}`}
      variant="body2"
      className={!wrapText ? 'no-wrap-text' : ''}
    >
      {interfaceIp === primaryNetwork ? `${interfaceName} (primary)` : interfaceName} -{' '}
      {interfaceIp}
    </Text>
  ))
}

const renderOperatingSystem = (_, node) => {
  const operatingSystem =
    pathStrOr('', 'combined.resmgr.info.os_info', node) || pathStrOr('', 'combined.osInfo', node)
  return <Text variant="body2">{operatingSystem}</Text>
}

const renderUUID = (_, { uuid }) => {
  return (
    <Tooltip title="This is the unique ID generated by PMK for this node. You will need this ID to perform any API based operations with PMK">
      <Text variant="body2">{uuid}</Text>
    </Tooltip>
  )
}

export const columns = [
  { id: 'name', label: 'Name', render: renderNodeDetailLink },
  { id: 'isMaster', label: 'Role', render: renderRole },
  { id: 'connectionStatus', label: 'Connection status', render: renderConnectionStatus },
  {
    id: 'platform9ComponentsStatus',
    label: 'Platform9 Components',
    render: renderNodeHealthStatus,
  },
  { id: 'api_responding', label: 'API Server Health', render: renderApiServerHealth },
  { id: 'logs', label: 'Logs', render: renderLogs },
  { id: 'primaryIp', label: 'Network Interfaces', render: renderNetworkInterfaces },
  { id: 'resource_utilization', label: 'Resource Utilization', render: renderStats },
  { id: 'os', label: 'Operating System', render: renderOperatingSystem },
  { id: 'clusterName', label: 'Cluster', render: renderClusterLink },
  { id: 'uuid', label: 'UUID', render: renderUUID, display: false },
  { id: 'isSpotInstance', label: 'Spot Instance?', display: false, render: getSpotInstance },
  { id: 'assignedRoles', label: 'Assigned Roles', render: renderRoles },
]

const isAdmin = (selected, store) => {
  return isAdminRole(prop('session', store))
}

export const options = {
  addText: 'Onboard a Node',
  addUrl: routes.nodes.add.path(),
  columns,
  cacheKey: ActionDataKeys.Nodes,
  name: 'Nodes',
  title: 'Nodes',
  uniqueIdentifier: 'uuid',
  searchTargets: ['name', 'uuid'],
  multiSelection: false,
  batchActions: [
    {
      cond: isAdmin,
      icon: 'headset',
      label: 'Remote Support',
      dialog: RemoteSupportDialog,
    },
    {
      cond: ([node]) => !node.isAuthorized,
      icon: 'plus-circle',
      label: 'Authorize',
      dialog: NodeAuthDialog,
    },
    {
      cond: ([node]) => node.isAuthorized && !node.clusterUuid,
      icon: 'trash-alt',
      label: 'Deauthorize',
      dialog: NodeDeAuthDialog,
      disabledInfo:
        "You can only de-authorize a node when it's not associated with any cluster. Detach the node from the cluster first.",
    },
  ],
  ListPage,
}

const components = createCRUDComponents(options)
export const NodesList = components.List

export default components.ListPage
