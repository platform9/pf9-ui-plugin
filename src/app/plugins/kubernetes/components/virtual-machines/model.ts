export enum VirtualMachineCreateTypes {
  AddNew = 'new',
  ImportURL = 'url',
  ImportDisk = 'disk',
  ClonePVC = 'pvc',
}

export enum VMVolumeTypes {
  CloudInitNoCloud = 'cloudInitNoCloud',
  CloudInitConfigDrive = 'cloudInitConfigDrive',
  PersistentVolumeClaim = 'persistentVolumeClaim',
  DataVolume = 'dataVolume',
  Ephemeral = 'ephemeral',
  ContainerDisk = 'containerDisk',
  EmptyDisk = 'emptyDisk',
  HostDisk = 'hostDisk',
  ConfigMap = 'configMap',
  Secret = 'secret',
  ServiceAccount = 'serviceAccount',
}
export const vmVolumeTypes = [
  VMVolumeTypes.CloudInitNoCloud,
  VMVolumeTypes.CloudInitConfigDrive,
  VMVolumeTypes.PersistentVolumeClaim,
  VMVolumeTypes.DataVolume,
  VMVolumeTypes.Ephemeral,
  VMVolumeTypes.ContainerDisk,
  VMVolumeTypes.EmptyDisk,
  VMVolumeTypes.HostDisk,
  VMVolumeTypes.ConfigMap,
  VMVolumeTypes.Secret,
  VMVolumeTypes.ServiceAccount,
]

// Generated by https://quicktype.io

export interface GetVirtualMachines {
  apiVersion: string
  items: IVirtualMachine[]
  kind: string
  metadata: IVirtualMachineMetadata
}

export interface IVirtualMachine {
  clusterId: string
  apiVersion: string
  kind: string
  metadata: ItemMetadata
  spec: ItemSpec
  status: Status
}

export interface ItemMetadata {
  annotations: Annotations
  creationTimestamp: string
  generation: number
  managedFields: ManagedField[]
  name: string
  namespace: string
  resourceVersion: string
  selfLink: string
  uid: string
}

export interface Annotations {
  'kubevirt.io/latest-observed-api-version': string
  'kubevirt.io/storage-observed-api-version': string
  'kubectl.kubernetes.io/last-applied-configuration'?: string
}

export interface ManagedField {
  apiVersion: string
  fieldsType: string
  fieldsV1: FieldsV1
  manager: string
  operation: string
  time: string
}

export interface FieldsV1 {
  'f:spec'?: FieldsV1FSpec
  'f:metadata'?: FieldsV1FMetadata
  'f:status'?: FStatus
}

export interface FieldsV1FMetadata {
  'f:annotations': FAnnotations
}

export interface FAnnotations {
  '.'?: Empty
  'f:kubevirt.io/latest-observed-api-version'?: Empty
  'f:kubevirt.io/storage-observed-api-version'?: Empty
  'f:kubectl.kubernetes.io/last-applied-configuration'?: Empty
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface Empty {}

export interface FieldsV1FSpec {
  '.'?: Empty
  'f:dataVolumeTemplates'?: Empty
  'f:running'?: Empty
  'f:template'?: FTemplate
}

export interface FTemplate {
  '.': Empty
  'f:metadata'?: FTemplateFMetadata
  'f:spec': FTemplateFSpec
}

export interface FTemplateFMetadata {
  '.': Empty
  'f:labels': FLabels
}

export interface FLabels {
  '.': Empty
  'f:kubevirt.io/size': Empty
}

export interface FTemplateFSpec {
  '.': Empty
  'f:domain': FDomain
  'f:networks': Empty
  'f:volumes': Empty
}

export interface FDomain {
  '.': Empty
  'f:devices': FDevices
  'f:machine': FMachine
  'f:resources': FResources
}

export interface FDevices {
  '.': Empty
  'f:disks': Empty
  'f:interfaces': Empty
  'f:rng': Empty
}

export interface FResources {
  '.': Empty
  'f:requests': FRequests
}

export interface FRequests {
  '.': Empty
  'f:memory': Empty
}

export interface FStatus {
  '.': Empty
  'f:created': Empty
  'f:volumeSnapshotStatuses': Empty
  'f:conditions'?: Empty
  'f:ready'?: Empty
  'f:activePods'?: Empty
  'f:guestOSInfo'?: Empty
  'f:nodeName'?: Empty
  'f:qosClass'?: Empty
  'f:interfaces'?: Empty
  'f:migrationMethod'?: Empty
  'f:phase'?: Empty
  'f:volumeStatus'?: Empty
}

export interface ItemSpec {
  dataVolumeTemplates?: DataVolumeTemplate[]
  running: boolean
  template: Template
}

export interface DataVolumeTemplate {
  metadata: DataVolumeTemplateMetadata
  spec: DataVolumeTemplateSpec
}

export interface DataVolumeTemplateMetadata {
  creationTimestamp: null
  name: string
}

export interface DataVolumeTemplateSpec {
  pvc: Pvc
  source: Source
}

export interface Pvc {
  accessModes: string[]
  resources: PvcResources
}

export interface PvcResources {
  requests: PurpleRequests
}

export interface PurpleRequests {
  storage: string
}

export interface Source {
  http: HTTP
}

export interface HTTP {
  url: string
}

export interface Template {
  metadata: TemplateMetadata
  spec: TemplateSpec
}

export interface TemplateMetadata {
  creationTimestamp: null
  labels?: Labels
}

export interface Labels {
  [key: string]: string
}

export interface TemplateSpec {
  domain: Domain
  networks: Network[]
  volumes: Volume[]
}
export interface Network {
  name: string
  pod?: Empty
  multus?: Multus
}

export interface Multus {
  networkName: string
}

export interface Volume {
  vmType?: VMVolumeTypes
  dataVolume?: DataVolume
  name: string
  cloudInitNoCloud?: CloudInitNoCloud
  containerDisk?: ContainerDisk
}

export interface CloudInitNoCloud {
  userDataBase64: string
}

export interface ContainerDisk {
  image: string
}

export interface DataVolume {
  name: string
}

export interface Condition {
  lastProbeTime: null
  lastTransitionTime: string
  status: string
  type: string
}

export interface VolumeSnapshotStatus {
  enabled: boolean
  name: string
  reason: string
}

export interface IVirtualMachineMetadata {
  continue: string
  resourceVersion: string
  selfLink: string
}

// details call

// Generated by https://quicktype.io

export interface GetVirtualMachineDetails {
  apiVersion: string
  kind: string
  metadata: Metadata
  spec: Spec
  status: Status
}

export interface Metadata {
  annotations: Annotations
  creationTimestamp: string
  finalizers: string[]
  generation: number
  labels: Labels
  managedFields: ManagedField[]
  name: string
  namespace: string
  resourceVersion: string
  selfLink: string
  uid: string
}

export interface FMachine {
  '.': Empty
  'f:type': Empty
}

export interface Spec {
  domain: Domain
  networks: Network[]
  terminationGracePeriodSeconds: number
  volumes: Volume[]
}

export interface Domain {
  cpu: CPU
  devices: Devices
  features: Features
  firmware: Firmware
  machine: Machine
  resources: Resources
}

export interface CPU {
  cores: number
  sockets: number
  threads: number
}

export interface Devices {
  disks: DiskElement[]
  interfaces: DevicesInterface[]
  rng: Empty
}

export interface DiskElement {
  disk: DiskDisk
  name: string
}

export interface DiskDisk {
  bus: string
}

export interface DevicesInterface {
  masquerade?: Empty
  name: string
  sriov?: Empty
}

export interface Features {
  acpi: ACPI
}

export interface ACPI {
  enabled: boolean
}

export interface Firmware {
  uuid: string
}

export interface Machine {
  type: string
}

export interface Resources {
  requests: Requests
}

export interface Requests {
  cpu: string
  memory: string
}

export interface Status {
  activePods: ActivePods
  conditions: Condition[]
  guestOSInfo: Empty
  interfaces: StatusInterface[]
  migrationMethod: string
  nodeName: string
  phase: string
  qosClass: string
  volumeStatus: VolumeStatus[]
}

export interface ActivePods {
  [key: string]: string
}

export interface StatusInterface {
  ipAddress: string
  ipAddresses: string[]
  mac: string
  name: string
}

export interface VolumeStatus {
  name: string
  target: string
}
